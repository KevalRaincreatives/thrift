///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class ProductDetailModelLinksCollection {
/*
{
  "href": "https://encros.rcstaging.co.in/wp-json/wc/v3/products"
}
*/

  String? href;

  ProductDetailModelLinksCollection({
    this.href,
  });
  ProductDetailModelLinksCollection.fromJson(Map<String, dynamic> json) {
    href = json["href"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["href"] = href;
    return data;
  }
}

class ProductDetailModelLinksSelf {
/*
{
  "href": "https://encros.rcstaging.co.in/wp-json/wc/v3/products/92341"
}
*/

  String? href;

  ProductDetailModelLinksSelf({
    this.href,
  });
  ProductDetailModelLinksSelf.fromJson(Map<String, dynamic> json) {
    href = json["href"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["href"] = href;
    return data;
  }
}

class ProductDetailModelLinks {
/*
{
  "self": [
    {
      "href": "https://encros.rcstaging.co.in/wp-json/wc/v3/products/92341"
    }
  ],
  "collection": [
    {
      "href": "https://encros.rcstaging.co.in/wp-json/wc/v3/products"
    }
  ]
}
*/

  List<ProductDetailModelLinksSelf?>? self;
  List<ProductDetailModelLinksCollection?>? collection;

  ProductDetailModelLinks({
    this.self,
    this.collection,
  });
  ProductDetailModelLinks.fromJson(Map<String, dynamic> json) {
    if (json["self"] != null) {
      final v = json["self"];
      final arr0 = <ProductDetailModelLinksSelf>[];
      v.forEach((v) {
        arr0.add(ProductDetailModelLinksSelf.fromJson(v));
      });
      self = arr0;
    }
    if (json["collection"] != null) {
      final v = json["collection"];
      final arr0 = <ProductDetailModelLinksCollection>[];
      v.forEach((v) {
        arr0.add(ProductDetailModelLinksCollection.fromJson(v));
      });
      collection = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (self != null) {
      final v = self;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["self"] = arr0;
    }
    if (collection != null) {
      final v = collection;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["collection"] = arr0;
    }
    return data;
  }
}

class ProductDetailModelMetaData {
/*
{
  "id": 1060724,
  "key": "eancode",
  "value": ""
}
*/

  int? id;
  String? key;
  String? value;

  ProductDetailModelMetaData({
    this.id,
    this.key,
    this.value,
  });
  ProductDetailModelMetaData.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    key = json["key"]?.toString();
    value = json["value"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["key"] = key;
    data["value"] = value;
    return data;
  }
}

class ProductDetailModelImages {
/*
{
  "id": 92342,
  "date_created": "2021-06-16T06:08:11",
  "date_created_gmt": "2021-06-16T06:08:11",
  "date_modified": "2021-06-16T06:08:11",
  "date_modified_gmt": "2021-06-16T06:08:11",
  "src": "https://encros.rcstaging.co.in/wp-content/uploads/2021/06/bouchon_4ef04134c4d11.jpg",
  "name": "bouchon_4ef04134c4d11.jpg",
  "alt": ""
}
*/

  int? id;
  String? dateCreated;
  String? dateCreatedGmt;
  String? dateModified;
  String? dateModifiedGmt;
  String? src;
  String? name;
  String? alt;

  ProductDetailModelImages({
    this.id,
    this.dateCreated,
    this.dateCreatedGmt,
    this.dateModified,
    this.dateModifiedGmt,
    this.src,
    this.name,
    this.alt,
  });
  ProductDetailModelImages.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    dateCreated = json["date_created"]?.toString();
    dateCreatedGmt = json["date_created_gmt"]?.toString();
    dateModified = json["date_modified"]?.toString();
    dateModifiedGmt = json["date_modified_gmt"]?.toString();
    src = json["src"]?.toString();
    name = json["name"]?.toString();
    alt = json["alt"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["date_created"] = dateCreated;
    data["date_created_gmt"] = dateCreatedGmt;
    data["date_modified"] = dateModified;
    data["date_modified_gmt"] = dateModifiedGmt;
    data["src"] = src;
    data["name"] = name;
    data["alt"] = alt;
    return data;
  }
}

class ProductDetailModelCategories {
/*
{
  "id": 249,
  "name": "Acer AcerLaser 406.",
  "slug": "acer-acerlaser-406"
}
*/

  int? id;
  String? name;
  String? slug;

  ProductDetailModelCategories({
    this.id,
    this.name,
    this.slug,
  });
  ProductDetailModelCategories.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    name = json["name"]?.toString();
    slug = json["slug"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["name"] = name;
    data["slug"] = slug;
    return data;
  }
}

class ProductDetailModelDimensions {
/*
{
  "length": "",
  "width": "",
  "height": ""
}
*/

  String? length;
  String? width;
  String? height;

  ProductDetailModelDimensions({
    this.length,
    this.width,
    this.height,
  });
  ProductDetailModelDimensions.fromJson(Map<String, dynamic> json) {
    length = json["length"]?.toString();
    width = json["width"]?.toString();
    height = json["height"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["length"] = length;
    data["width"] = width;
    data["height"] = height;
    return data;
  }
}

class ProductDetailModel {
/*
{
  "id": 92341,
  "name": "Bouchon pour Toner",
  "slug": "bouchon-pour-toner",
  "permalink": "https://encros.rcstaging.co.in/bouchon-pour-toner/",
  "date_created": "2021-06-16T06:08:11",
  "date_created_gmt": "2021-06-16T06:08:11",
  "date_modified": "2021-06-16T06:08:12",
  "date_modified_gmt": "2021-06-16T06:08:12",
  "type": "simple",
  "status": "publish",
  "featured": false,
  "catalog_visibility": "visible",
  "description": "<p>Bouchon pour le rechargement de cartouche Laser</p>\n<p> </p>\n<p style=\"text-align: center\"><img title=\"methode de recharge Toner\" src=\"components/com_virtuemart/shop_image/boutique/methode-recharge-toner.jpg\" alt=\"methode-recharge-toner\" width=\"200\" height=\"69\" border=\"0\" /></p>\n<p style=\"text-align: center\"><img title=\"methode de recharge avec bouteille de toner\" src=\"components/com_virtuemart/shop_image/boutique/methode-recharge-laser.jpg\" alt=\"methode-recharge-laser\" width=\"135\" height=\"85\" border=\"0\" /></p>\n<p style=\"text-align: center\"> </p>\n<p>{source}<br />&lt;p style=\"text-align: center;\"&gt;<br />&lt;iframe width=\"380\" height=\"280\" src=\"https://www.youtube.com/embed/Pr8IJ82iiWE?rel=0\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;<br />&lt;/p&gt;</p>\n<p>{/source}</p>\n",
  "short_description": "<p>bouchon pour le rechargement de Toner</p>\n",
  "sku": "37418",
  "price": "1.25418",
  "regular_price": "1.25418",
  "sale_price": "",
  "date_on_sale_from": null,
  "date_on_sale_from_gmt": null,
  "date_on_sale_to": null,
  "date_on_sale_to_gmt": null,
  "on_sale": false,
  "purchasable": true,
  "total_sales": 0,
  "virtual": false,
  "downloadable": false,
  "downloads": [
    null
  ],
  "download_limit": -1,
  "download_expiry": -1,
  "external_url": "",
  "button_text": "",
  "tax_status": "taxable",
  "tax_class": "",
  "manage_stock": false,
  "stock_quantity": null,
  "backorders": "no",
  "backorders_allowed": false,
  "backordered": false,
  "low_stock_amount": null,
  "sold_individually": false,
  "weight": "",
  "dimensions": {
    "length": "",
    "width": "",
    "height": ""
  },
  "shipping_required": true,
  "shipping_taxable": true,
  "shipping_class": "",
  "shipping_class_id": 0,
  "reviews_allowed": true,
  "average_rating": "0.00",
  "rating_count": 0,
  "upsell_ids": [
    null
  ],
  "cross_sell_ids": [
    null
  ],
  "parent_id": 0,
  "purchase_note": "",
  "categories": [
    {
      "id": 249,
      "name": "Acer AcerLaser 406.",
      "slug": "acer-acerlaser-406"
    }
  ],
  "tags": [
    null
  ],
  "images": [
    {
      "id": 92342,
      "date_created": "2021-06-16T06:08:11",
      "date_created_gmt": "2021-06-16T06:08:11",
      "date_modified": "2021-06-16T06:08:11",
      "date_modified_gmt": "2021-06-16T06:08:11",
      "src": "https://encros.rcstaging.co.in/wp-content/uploads/2021/06/bouchon_4ef04134c4d11.jpg",
      "name": "bouchon_4ef04134c4d11.jpg",
      "alt": ""
    }
  ],
  "attributes": [
    null
  ],
  "default_attributes": [
    null
  ],
  "variations": [
    null
  ],
  "grouped_products": [
    null
  ],
  "menu_order": 0,
  "price_html": "<span class=\"woocommerce-Price-amount amount\"><bdi>1,25<span class=\"woocommerce-Price-currencySymbol\">&euro;</span></bdi></span>",
  "related_ids": [
    911
  ],
  "meta_data": [
    {
      "id": 1060724,
      "key": "eancode",
      "value": ""
    }
  ],
  "stock_status": "instock",
  "_links": {
    "self": [
      {
        "href": "https://encros.rcstaging.co.in/wp-json/wc/v3/products/92341"
      }
    ],
    "collection": [
      {
        "href": "https://encros.rcstaging.co.in/wp-json/wc/v3/products"
      }
    ]
  }
}
*/

  int? id;
  String? name;
  String? slug;
  String? permalink;
  String? dateCreated;
  String? dateCreatedGmt;
  String? dateModified;
  String? dateModifiedGmt;
  String? type;
  String? status;
  bool? featured;
  String? catalogVisibility;
  String? description;
  String? shortDescription;
  String? sku;
  String? price;
  String? regularPrice;
  String? salePrice;
  String? dateOnSaleFrom;
  String? dateOnSaleFromGmt;
  String? dateOnSaleTo;
  String? dateOnSaleToGmt;
  bool? onSale;
  bool? purchasable;
  int? totalSales;
  bool? virtual;
  bool? downloadable;
  int? downloadLimit;
  int? downloadExpiry;
  String? externalUrl;
  String? buttonText;
  String? taxStatus;
  String? taxClass;
  bool? manageStock;
  String? stockQuantity;
  String? backorders;
  bool? backordersAllowed;
  bool? backordered;
  String? lowStockAmount;
  bool? soldIndividually;
  String? weight;
  ProductDetailModelDimensions? dimensions;
  bool? shippingRequired;
  bool? shippingTaxable;
  String? shippingClass;
  int? shippingClassId;
  bool? reviewsAllowed;
  String? averageRating;
  int? ratingCount;
  int? parentId;
  String? purchaseNote;
  List<ProductDetailModelCategories?>? categories;
  List<ProductDetailModelImages?>? images;
  List<Attributes?>? attributes;
  List<int?>? variations;
  int? menuOrder;
  String? priceHtml;
  List<int?>? relatedIds;
  List<ProductDetailModelMetaData?>? metaData;
  String? stockStatus;
  ProductDetailModelLinks? Links;

  ProductDetailModel({
    this.id,
    this.name,
    this.slug,
    this.permalink,
    this.dateCreated,
    this.dateCreatedGmt,
    this.dateModified,
    this.dateModifiedGmt,
    this.type,
    this.status,
    this.featured,
    this.catalogVisibility,
    this.description,
    this.shortDescription,
    this.sku,
    this.price,
    this.regularPrice,
    this.salePrice,
    this.dateOnSaleFrom,
    this.dateOnSaleFromGmt,
    this.dateOnSaleTo,
    this.dateOnSaleToGmt,
    this.onSale,
    this.purchasable,
    this.totalSales,
    this.virtual,
    this.downloadable,
    this.downloadLimit,
    this.downloadExpiry,
    this.externalUrl,
    this.buttonText,
    this.taxStatus,
    this.taxClass,
    this.manageStock,
    this.stockQuantity,
    this.backorders,
    this.backordersAllowed,
    this.backordered,
    this.lowStockAmount,
    this.soldIndividually,
    this.weight,
    this.dimensions,
    this.shippingRequired,
    this.shippingTaxable,
    this.shippingClass,
    this.shippingClassId,
    this.reviewsAllowed,
    this.averageRating,
    this.ratingCount,
    this.parentId,
    this.purchaseNote,
    this.categories,
    this.images,
    this.attributes,
    this.variations,
    this.menuOrder,
    this.priceHtml,
    this.relatedIds,
    this.metaData,
    this.stockStatus,
    this.Links,
  });
  ProductDetailModel.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    name = json["name"]?.toString();
    slug = json["slug"]?.toString();
    permalink = json["permalink"]?.toString();
    dateCreated = json["date_created"]?.toString();
    dateCreatedGmt = json["date_created_gmt"]?.toString();
    dateModified = json["date_modified"]?.toString();
    dateModifiedGmt = json["date_modified_gmt"]?.toString();
    type = json["type"]?.toString();
    status = json["status"]?.toString();
    featured = json["featured"];
    catalogVisibility = json["catalog_visibility"]?.toString();
    description = json["description"]?.toString();
    shortDescription = json["short_description"]?.toString();
    sku = json["sku"]?.toString();
    price = json["price"]?.toString();
    regularPrice = json["regular_price"]?.toString();
    salePrice = json["sale_price"]?.toString();
    dateOnSaleFrom = json["date_on_sale_from"]?.toString();
    dateOnSaleFromGmt = json["date_on_sale_from_gmt"]?.toString();
    dateOnSaleTo = json["date_on_sale_to"]?.toString();
    dateOnSaleToGmt = json["date_on_sale_to_gmt"]?.toString();
    onSale = json["on_sale"];
    purchasable = json["purchasable"];
    totalSales = json["total_sales"]?.toInt();
    virtual = json["virtual"];
    downloadable = json["downloadable"];
    downloadLimit = json["download_limit"]?.toInt();
    downloadExpiry = json["download_expiry"]?.toInt();
    externalUrl = json["external_url"]?.toString();
    buttonText = json["button_text"]?.toString();
    taxStatus = json["tax_status"]?.toString();
    taxClass = json["tax_class"]?.toString();
    manageStock = json["manage_stock"];
    stockQuantity = json["stock_quantity"]?.toString();
    backorders = json["backorders"]?.toString();
    backordersAllowed = json["backorders_allowed"];
    backordered = json["backordered"];
    lowStockAmount = json["low_stock_amount"]?.toString();
    soldIndividually = json["sold_individually"];
    weight = json["weight"]?.toString();
    dimensions = (json["dimensions"] != null) ? ProductDetailModelDimensions.fromJson(json["dimensions"]) : null;
    shippingRequired = json["shipping_required"];
    shippingTaxable = json["shipping_taxable"];
    shippingClass = json["shipping_class"]?.toString();
    shippingClassId = json["shipping_class_id"]?.toInt();
    reviewsAllowed = json["reviews_allowed"];
    averageRating = json["average_rating"]?.toString();
    ratingCount = json["rating_count"]?.toInt();
    parentId = json["parent_id"]?.toInt();
    purchaseNote = json["purchase_note"]?.toString();
    if (json["categories"] != null) {
    final v = json["categories"];
    final arr0 = <ProductDetailModelCategories>[];
    v.forEach((v) {
    arr0.add(ProductDetailModelCategories.fromJson(v));
    });
    categories = arr0;
    }
    if (json["images"] != null) {
    final v = json["images"];
    final arr0 = <ProductDetailModelImages>[];
    v.forEach((v) {
    arr0.add(ProductDetailModelImages.fromJson(v));
    });
    images = arr0;
    }
    if (json['attributes'] != null) {
      attributes = <Attributes>[];
      json['attributes'].forEach((v) {
        attributes!.add(new Attributes.fromJson(v));
      });
    }
    if (json["variations"] != null) {
      final v = json["variations"];
      final arr0 = <int>[];
      v.forEach((v) {
        arr0.add(v.toInt());
      });
      variations = arr0;
    }
    menuOrder = json["menu_order"]?.toInt();
    priceHtml = json["price_html"]?.toString();
    if (json["related_ids"] != null) {
    final v = json["related_ids"];
    final arr0 = <int>[];
    v.forEach((v) {
    arr0.add(v.toInt());
    });
    relatedIds = arr0;
    }
    if (json["meta_data"] != null) {
    final v = json["meta_data"];
    final arr0 = <ProductDetailModelMetaData>[];
    v.forEach((v) {
    arr0.add(ProductDetailModelMetaData.fromJson(v));
    });
    metaData = arr0;
    }
    stockStatus = json["stock_status"]?.toString();
    Links = (json["_links"] != null) ? ProductDetailModelLinks.fromJson(json["_links"]) : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["name"] = name;
    data["slug"] = slug;
    data["permalink"] = permalink;
    data["date_created"] = dateCreated;
    data["date_created_gmt"] = dateCreatedGmt;
    data["date_modified"] = dateModified;
    data["date_modified_gmt"] = dateModifiedGmt;
    data["type"] = type;
    data["status"] = status;
    data["featured"] = featured;
    data["catalog_visibility"] = catalogVisibility;
    data["description"] = description;
    data["short_description"] = shortDescription;
    data["sku"] = sku;
    data["price"] = price;
    data["regular_price"] = regularPrice;
    data["sale_price"] = salePrice;
    data["date_on_sale_from"] = dateOnSaleFrom;
    data["date_on_sale_from_gmt"] = dateOnSaleFromGmt;
    data["date_on_sale_to"] = dateOnSaleTo;
    data["date_on_sale_to_gmt"] = dateOnSaleToGmt;
    data["on_sale"] = onSale;
    data["purchasable"] = purchasable;
    data["total_sales"] = totalSales;
    data["virtual"] = virtual;
    data["downloadable"] = downloadable;
    data["download_limit"] = downloadLimit;
    data["download_expiry"] = downloadExpiry;
    data["external_url"] = externalUrl;
    data["button_text"] = buttonText;
    data["tax_status"] = taxStatus;
    data["tax_class"] = taxClass;
    data["manage_stock"] = manageStock;
    data["stock_quantity"] = stockQuantity;
    data["backorders"] = backorders;
    data["backorders_allowed"] = backordersAllowed;
    data["backordered"] = backordered;
    data["low_stock_amount"] = lowStockAmount;
    data["sold_individually"] = soldIndividually;
    data["weight"] = weight;
    if (dimensions != null) {
    data["dimensions"] = dimensions!.toJson();
    }
    data["shipping_required"] = shippingRequired;
    data["shipping_taxable"] = shippingTaxable;
    data["shipping_class"] = shippingClass;
    data["shipping_class_id"] = shippingClassId;
    data["reviews_allowed"] = reviewsAllowed;
    data["average_rating"] = averageRating;
    data["rating_count"] = ratingCount;
    data["parent_id"] = parentId;
    data["purchase_note"] = purchaseNote;
    if (categories != null) {
    final v = categories;
    final arr0 = [];
    v!.forEach((v) {
    arr0.add(v!.toJson());
    });
    data["categories"] = arr0;
    }
    if (images != null) {
    final v = images;
    final arr0 = [];
    v!.forEach((v) {
    arr0.add(v!.toJson());
    });
    data["images"] = arr0;
    }
    data["menu_order"] = menuOrder;
    data["price_html"] = priceHtml;
    if (relatedIds != null) {
    final v = relatedIds;
    final arr0 = [];
    v!.forEach((v) {
    arr0.add(v);
    });
    data["related_ids"] = arr0;
    }
    if (metaData != null) {
    final v = metaData;
    final arr0 = [];
    v!.forEach((v) {
    arr0.add(v!.toJson());
    });
    data["meta_data"] = arr0;
    }
    data["stock_status"] = stockStatus;
    if (Links != null) {
    data["_links"] = Links!.toJson();
    }
    return data;
  }
}
class Attributes {
  int? id;
  String? name;
  int? position;
  bool? visible;
  bool? variation;
  List<String>? options;

  Attributes(
      {this.id,
        this.name,
        this.position,
        this.visible,
        this.variation,
        this.options});

  Attributes.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    name = json['name'];
    position = json['position'];
    visible = json['visible'];
    variation = json['variation'];
    options = json['options'].cast<String>();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['id'] = this.id;
    data['name'] = this.name;
    data['position'] = this.position;
    data['visible'] = this.visible;
    data['variation'] = this.variation;
    data['options'] = this.options;
    return data;
  }
}